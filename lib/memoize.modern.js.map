{"version":3,"file":"memoize.modern.js","sources":["../src/index.ts"],"sourcesContent":["import Semaphore from \"@chriscdn/promise-semaphore\";\nimport QuickLRU from \"quick-lru\";\n\nconst kDefaultMaxSize = 1000;\n\ntype Options<T extends any[]> = {\n    maxSize: number;\n    maxAge?: number;\n    resolver: (...args: T) => string;\n};\n\n/**\n * Memoize a synchronous function.\n */\nconst Memoize = <Args extends unknown[], Return>(\n    cb: (...args: Args) => Return,\n    options: Partial<Options<Args>> = {},\n) => {\n    const maxAge: number | undefined = options.maxAge;\n    const maxSize = options.maxSize ?? kDefaultMaxSize;\n\n    const resolver = options.resolver ??\n        ((...args: Args) => JSON.stringify(args));\n\n    const cache = new QuickLRU<string, Return>({\n        maxAge,\n        maxSize,\n    });\n\n    const memoizedFunction = (...args: Args): Return => {\n        const key = resolver(...args);\n\n        if (cache.has(key)) {\n            return cache.get(key);\n        } else {\n            const returnValue = cb(...args);\n            cache.set(key, returnValue);\n            return returnValue;\n        }\n    };\n\n    memoizedFunction.cache = cache;\n\n    return memoizedFunction;\n};\n\n/**\n * Memoize an asynchronous function.\n *\n * This differs from the sychronous case by ensuring multiple calls with the\n * same arguments is only evaluated once. This is controlled by using a\n * semaphore, which forces redundant calls to wait until the first call\n * completes.\n */\nconst MemoizeAsync = <Args extends unknown[], Return>(\n    cb: (...args: Args) => Promise<Return>,\n    options: Partial<Options<Args>> = {},\n) => {\n    const maxAge: number | undefined = options.maxAge;\n    const maxSize = options.maxSize ?? kDefaultMaxSize;\n\n    const resolver = options.resolver ??\n        ((...args: Args) => JSON.stringify(args));\n\n    const semaphore = new Semaphore();\n\n    const cache = new QuickLRU<string, Return>({\n        maxAge,\n        maxSize,\n    });\n\n    const memoizedFunction = async (...args: Args): Promise<Return> => {\n        const key = resolver(...args);\n\n        if (cache.has(key)) {\n            return cache.get(key)!;\n        } else {\n            try {\n                await semaphore.acquire(key);\n\n                if (cache.has(key)) {\n                    return cache.get(key);\n                } else {\n                    const returnValue = await cb(...args);\n                    cache.set(key, returnValue);\n                    return returnValue;\n                }\n            } finally {\n                semaphore.release(key);\n            }\n        }\n    };\n\n    memoizedFunction.cache = cache;\n\n    return memoizedFunction;\n};\n\nexport { Memoize, MemoizeAsync };\n"],"names":["Memoize","cb","options","_options$maxSize","_options$resolver","maxSize","resolver","args","JSON","stringify","cache","QuickLRU","maxAge","memoizedFunction","key","has","get","returnValue","set","MemoizeAsync","_options$maxSize2","_options$resolver2","semaphore","Semaphore","async","acquire","release"],"mappings":"oEAGA,MAWMA,EAAUA,CACZC,EACAC,EAAkC,CAAA,KAClC,IAAAC,EAAAC,EACA,MACMC,SAAOF,EAAGD,EAAQG,SAAOF,EAhBX,IAkBdG,EAA2B,OAAnBF,EAAGF,EAAQI,UAAQF,EAC5B,IAAIG,IAAeC,KAAKC,UAAUF,GAEjCG,EAAQ,IAAIC,EAAyB,CACvCC,OAP+BV,EAAQU,OAQvCP,YAGEQ,EAAmBA,IAAIN,KACzB,MAAMO,EAAMR,KAAYC,GAExB,GAAIG,EAAMK,IAAID,GACV,OAAOJ,EAAMM,IAAIF,GACd,CACH,MAAMG,EAAchB,KAAMM,GAE1B,OADAG,EAAMQ,IAAIJ,EAAKG,GACRA,CACV,GAKL,OAFAJ,EAAiBH,MAAQA,EAElBG,GAWLM,EAAeA,CACjBlB,EACAC,EAAkC,CAAA,KAClC,IAAAkB,EAAAC,EACA,MAAMT,EAA6BV,EAAQU,OACrCP,EAAyBe,OAAlBA,EAAGlB,EAAQG,SAAOe,EAxDX,IA0Ddd,SAAQe,EAAGnB,EAAQI,UAAQe,EAC5B,IAAId,IAAeC,KAAKC,UAAUF,GAEjCe,EAAY,IAAIC,EAEhBb,EAAQ,IAAIC,EAAyB,CACvCC,SACAP,YAGEQ,EAAmBW,SAAUjB,KAC/B,MAAMO,EAAMR,KAAYC,GAExB,GAAIG,EAAMK,IAAID,GACV,OAAOJ,EAAMM,IAAIF,GAEjB,IAGI,SAFMQ,EAAUG,QAAQX,GAEpBJ,EAAMK,IAAID,GACV,OAAOJ,EAAMM,IAAIF,GACd,CACH,MAAMG,QAAoBhB,KAAMM,GAEhC,OADAG,EAAMQ,IAAIJ,EAAKG,GACRA,CACV,CACJ,CAAA,QACGK,EAAUI,QAAQZ,EACrB,CACJ,EAKL,OAFAD,EAAiBH,MAAQA,EAElBG"}