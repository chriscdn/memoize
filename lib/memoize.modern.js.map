{"version":3,"file":"memoize.modern.js","sources":["../src/index.ts"],"sourcesContent":["import { Semaphore } from \"@chriscdn/promise-semaphore\";\nimport QuickLRU from \"quick-lru\";\n\nconst kDefaultMaxSize = 1000;\n\ntype Options<T extends any[], Return> = {\n  maxSize: number;\n  maxAge?: number;\n  shouldCache: (returnValue: Return, key: string) => boolean;\n  resolver: (...args: T) => string;\n};\n\n/**\n * Memoize a synchronous function.\n */\nconst Memoize = <Args extends unknown[], Return>(\n  cb: (...args: Args) => Return,\n  options: Partial<Options<Args, Return>> = {},\n) => {\n  const maxAge: number | undefined = options.maxAge;\n  const maxSize = options.maxSize ?? kDefaultMaxSize;\n  const shouldCache = options.shouldCache ?? (() => true);\n\n  const resolver = options.resolver ??\n    ((...args: Args) => JSON.stringify(args));\n\n  const cache = new QuickLRU<string, Return>({\n    maxAge,\n    maxSize,\n  });\n\n  const memoizedFunction = (...args: Args): Return => {\n    const key = resolver(...args);\n\n    if (cache.has(key)) {\n      return cache.get(key) as Return;\n    } else {\n      const returnValue = cb(...args);\n      if (shouldCache(returnValue, key)) {\n        cache.set(key, returnValue);\n      }\n      return returnValue;\n    }\n  };\n\n  memoizedFunction.cache = cache;\n\n  return memoizedFunction;\n};\n\n/**\n * Memoize an asynchronous function.\n */\nconst MemoizeAsync = <Args extends unknown[], Return>(\n  cb: (...args: Args) => Promise<Return>,\n  options: Partial<Options<Args, Return>> = {},\n) => {\n  const maxAge: number | undefined = options.maxAge;\n  const maxSize = options.maxSize ?? kDefaultMaxSize;\n  const shouldCache = options.shouldCache ?? (() => true);\n\n  const resolver = options.resolver ??\n    ((...args: Args) => JSON.stringify(args));\n\n  const cache = new QuickLRU<string, Return>({\n    maxAge,\n    maxSize,\n  });\n\n  const semaphore = new Semaphore();\n\n  const memoizedFunction = async (...args: Args): Promise<Return> => {\n    const key = resolver(...args);\n\n    try {\n      await semaphore.acquire(key);\n\n      if (cache.has(key)) {\n        return cache.get(key) as Return;\n      } else {\n        const returnValue = await cb(...args);\n        if (shouldCache(returnValue, key)) {\n          cache.set(key, returnValue);\n        }\n        return returnValue;\n      }\n    } finally {\n      semaphore.release(key);\n    }\n  };\n\n  memoizedFunction.cache = cache;\n\n  return memoizedFunction;\n};\n\nexport { Memoize, MemoizeAsync };\n"],"names":["Memoize","cb","options","_options$maxSize","_options$shouldCache","_options$resolver","maxSize","shouldCache","resolver","args","JSON","stringify","cache","QuickLRU","maxAge","memoizedFunction","key","has","get","returnValue","set","MemoizeAsync","_options$maxSize2","_options$shouldCache2","_options$resolver2","semaphore","Semaphore","async","acquire","release"],"mappings":"iFAGA,MAYMA,EAAUA,CACdC,EACAC,EAA0C,MACxC,IAAAC,EAAAC,EAAAC,EACF,MACMC,SAAOH,EAAGD,EAAQI,SAAOH,EAjBT,IAkBhBI,EAAiC,OAAtBH,EAAGF,EAAQK,aAAWH,EAAK,KAAM,EAE5CI,EAA2BH,OAAnBA,EAAGH,EAAQM,UAAQH,EAC9B,IAAII,IAAeC,KAAKC,UAAUF,GAE/BG,EAAQ,IAAIC,EAAyB,CACzCC,OARiCZ,EAAQY,OASzCR,YAGIS,EAAmBA,IAAIN,KAC3B,MAAMO,EAAMR,KAAYC,GAExB,GAAIG,EAAMK,IAAID,GACZ,OAAOJ,EAAMM,IAAIF,GACZ,CACL,MAAMG,EAAclB,KAAMQ,GAI1B,OAHIF,EAAYY,EAAaH,IAC3BJ,EAAMQ,IAAIJ,EAAKG,GAEVA,CACR,GAKH,OAFAJ,EAAiBH,MAAQA,EAElBG,GAMHM,EAAeA,CACnBpB,EACAC,EAA0C,CAAE,SAC1CoB,EAAAC,EAAAC,EACF,MACMlB,EAAyB,OAAlBgB,EAAGpB,EAAQI,SAAOgB,EAvDT,IAwDhBf,SAAWgB,EAAGrB,EAAQK,aAAWgB,EAAK,KAAM,EAE5Cf,EAA2B,OAAnBgB,EAAGtB,EAAQM,UAAQgB,EAC9B,IAAIf,IAAeC,KAAKC,UAAUF,GAE/BG,EAAQ,IAAIC,EAAyB,CACzCC,OARiCZ,EAAQY,OASzCR,YAGImB,EAAY,IAAIC,EAEhBX,EAAmBY,SAAUlB,KACjC,MAAMO,EAAMR,KAAYC,GAExB,IAGE,SAFMgB,EAAUG,QAAQZ,GAEpBJ,EAAMK,IAAID,GACZ,OAAOJ,EAAMM,IAAIF,GACZ,CACL,MAAMG,QAAoBlB,KAAMQ,GAIhC,OAHIF,EAAYY,EAAaH,IAC3BJ,EAAMQ,IAAIJ,EAAKG,GAEVA,CACR,CACF,CAAA,QACCM,EAAUI,QAAQb,EACnB,GAKH,OAFAD,EAAiBH,MAAQA,EAElBG"}