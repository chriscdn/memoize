{"version":3,"file":"memoize.modern.js","sources":["../src/index.ts"],"sourcesContent":["import { LRUCache } from \"lru-cache\";\nimport Semaphore from \"@chriscdn/promise-semaphore\";\n\ntype Options<T extends any[]> = {\n    ttl?: LRUCache.Milliseconds;\n    max: number;\n    resolver: (...args: T) => string;\n};\n\nconst kDefaultMax = 1000;\n\nconst Memoize = <Args extends any[], Return extends {}>(\n    cb: (...args: Args) => Return,\n    options: Partial<Options<Args>> = {},\n) => {\n    const ttl: number | undefined = options.ttl;\n    const max = options.max ?? kDefaultMax;\n    const resolver = options.resolver ??\n        ((...args: Args) => JSON.stringify(args));\n\n    const cache = new LRUCache<string, Return>({\n        ttl,\n        max,\n    });\n\n    return (...args: Args): Return => {\n        const key = resolver(...args);\n\n        if (cache.has(key)) {\n            return cache.get(key)!;\n        } else {\n            const returnValue = cb(...args);\n            cache.set(key, returnValue);\n            return returnValue;\n        }\n    };\n};\n\nconst MemoizeAsync = <Args extends any[], Return extends {}>(\n    cb: (...args: Args) => Promise<Return>,\n    options: Partial<Options<Args>> = {},\n) => {\n    const ttl: number | undefined = options.ttl;\n    const max = options.max ?? kDefaultMax;\n    const resolver = options.resolver ??\n        ((...args: Args) => JSON.stringify(args));\n\n    const semaphore = new Semaphore();\n\n    const cache = new LRUCache<string, Return>({\n        ttl,\n        max,\n    });\n\n    return async (...args: Args): Promise<Return> => {\n        const key = resolver(...args);\n\n        if (cache.has(key)) {\n            return cache.get(key)!;\n        } else {\n            try {\n                await semaphore.acquire(key);\n\n                if (cache.has(key)) {\n                    return cache.get(key)!;\n                } else {\n                    const returnValue = await cb(...args);\n                    cache.set(key, returnValue);\n                    return returnValue;\n                }\n            } finally {\n                semaphore.release(key);\n            }\n        }\n    };\n};\n\nexport { Memoize, MemoizeAsync };\n"],"names":["Memoize","cb","options","_options$max","_options$resolver","max","resolver","args","JSON","stringify","cache","LRUCache","ttl","key","has","get","returnValue","set","MemoizeAsync","_options$max2","_options$resolver2","semaphore","Semaphore","async","acquire","release"],"mappings":"gFASA,MAEMA,EAAUA,CACZC,EACAC,EAAkC,CAAA,SAClCC,EAAAC,EACA,MACMC,SAAGF,EAAGD,EAAQG,KAAGF,EAPP,IAQVG,EAA2BF,OAAnBA,EAAGF,EAAQI,UAAQF,EAC5B,IAAIG,IAAeC,KAAKC,UAAUF,GAEjCG,EAAQ,IAAIC,EAAyB,CACvCC,IAN4BV,EAAQU,IAOpCP,QAGJ,MAAO,IAAIE,KACP,MAAMM,EAAMP,KAAYC,GAExB,GAAIG,EAAMI,IAAID,GACV,OAAOH,EAAMK,IAAIF,GACd,CACH,MAAMG,EAAcf,KAAMM,GAE1B,OADAG,EAAMO,IAAIJ,EAAKG,GACRA,CACV,EACL,EAGEE,EAAeA,CACjBjB,EACAC,EAAkC,CAAE,KACpC,IAAAiB,EAAAC,EACA,MAAMR,EAA0BV,EAAQU,IAClCP,EAAiB,OAAdc,EAAGjB,EAAQG,KAAGc,EAlCP,IAmCVb,EAA2B,OAAnBc,EAAGlB,EAAQI,UAAQc,EAC5B,IAAIb,IAAeC,KAAKC,UAAUF,GAEjCc,EAAY,IAAIC,EAEhBZ,EAAQ,IAAIC,EAAyB,CACvCC,MACAP,QAGJ,OAAOkB,SAAUhB,KACb,MAAMM,EAAMP,KAAYC,GAExB,GAAIG,EAAMI,IAAID,GACV,OAAOH,EAAMK,IAAIF,GAEjB,IAGI,SAFMQ,EAAUG,QAAQX,GAEpBH,EAAMI,IAAID,GACV,OAAOH,EAAMK,IAAIF,GACd,CACH,MAAMG,QAAoBf,KAAMM,GAEhC,OADAG,EAAMO,IAAIJ,EAAKG,GACRA,CACV,CACJ,CAAA,QACGK,EAAUI,QAAQZ,EACrB,CACJ,CACL"}