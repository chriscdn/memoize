{"version":3,"file":"memoize.cjs","sources":["../src/index.ts"],"sourcesContent":["import Semaphore from \"@chriscdn/promise-semaphore\";\nimport QuickLRU from \"quick-lru\";\n\nconst kDefaultMaxSize = 1000;\n\ntype Options<T extends any[]> = {\n    maxSize: number;\n    maxAge?: number;\n    resolver: (...args: T) => string;\n};\n\n/**\n * Memoize a synchronous function.\n */\nconst Memoize = <Args extends unknown[], Return>(\n    cb: (...args: Args) => Return,\n    options: Partial<Options<Args>> = {},\n) => {\n    const maxAge: number | undefined = options.maxAge;\n    const maxSize = options.maxSize ?? kDefaultMaxSize;\n\n    const resolver = options.resolver ??\n        ((...args: Args) => JSON.stringify(args));\n\n    const cache = new QuickLRU<string, Return>({\n        maxAge,\n        maxSize,\n    });\n\n    const memoizedFunction = (...args: Args): Return => {\n        const key = resolver(...args);\n\n        if (cache.has(key)) {\n            return cache.get(key);\n        } else {\n            const returnValue = cb(...args);\n            cache.set(key, returnValue);\n            return returnValue;\n        }\n    };\n\n    memoizedFunction.cache = cache;\n\n    return memoizedFunction;\n};\n\n/**\n * Memoize an asynchronous function.\n *\n * This differs from the sychronous case by ensuring multiple calls with the\n * same arguments is only evaluated once. This is controlled by using a\n * semaphore, which forces redundant calls to wait until the first call\n * completes.\n */\nconst MemoizeAsync = <Args extends unknown[], Return>(\n    cb: (...args: Args) => Promise<Return>,\n    options: Partial<Options<Args>> = {},\n) => {\n    const maxAge: number | undefined = options.maxAge;\n    const maxSize = options.maxSize ?? kDefaultMaxSize;\n\n    const resolver = options.resolver ??\n        ((...args: Args) => JSON.stringify(args));\n\n    const semaphore = new Semaphore();\n\n    const cache = new QuickLRU<string, Return>({\n        maxAge,\n        maxSize,\n    });\n\n    const memoizedFunction = async (...args: Args): Promise<Return> => {\n        const key = resolver(...args);\n\n        if (cache.has(key)) {\n            return cache.get(key)!;\n        } else {\n            try {\n                await semaphore.acquire(key);\n\n                if (cache.has(key)) {\n                    return cache.get(key);\n                } else {\n                    const returnValue = await cb(...args);\n                    cache.set(key, returnValue);\n                    return returnValue;\n                }\n            } finally {\n                semaphore.release(key);\n            }\n        }\n    };\n\n    memoizedFunction.cache = cache;\n\n    return memoizedFunction;\n};\n\nexport { Memoize, MemoizeAsync };\n"],"names":["cb","options","_options$maxSize","_options$resolver","maxSize","resolver","JSON","stringify","slice","call","arguments","cache","QuickLRU","maxAge","memoizedFunction","args","key","apply","has","get","returnValue","set","_options$maxSize2","_options$resolver2","semaphore","Semaphore","_arguments","Promise","resolve","acquire","then","_finallyRethrows","_wasThrown","_result","release","e","reject"],"mappings":"wMAcgB,SACZA,EACAC,GACAC,IAAAA,EAAAC,OADAF,IAAAA,IAAAA,EAAkC,CAAA,GAElC,IACMG,EAAyB,OAAlBF,EAAGD,EAAQG,SAAOF,EAhBX,IAkBdG,EAA2B,OAAnBF,EAAGF,EAAQI,UAAQF,EAC5B,WAAmB,OAAAG,KAAKC,UAAS,GAAAC,MAAAC,KAAAC,WAAM,EAEtCC,EAAQ,IAAIC,EAAAA,QAAyB,CACvCC,OAP+BZ,EAAQY,OAQvCT,QAAAA,IAGEU,EAAmB,WAAI,IAAAC,EAAUP,GAAAA,MAAAC,KAAAC,WAC7BM,EAAMX,EAAQY,WAAIF,EAAAA,GAExB,GAAIJ,EAAMO,IAAIF,GACV,OAAOL,EAAMQ,IAAIH,GAEjB,IAAMI,EAAcpB,EAAEiB,WAAIF,EAAAA,GAE1B,OADAJ,EAAMU,IAAIL,EAAKI,GACRA,CAEf,EAIA,OAFAN,EAAiBH,MAAQA,EAElBG,CACX,uBAUqB,SACjBd,EACAC,GACAqB,IAAAA,EAAAC,OADAtB,IAAAA,IAAAA,EAAkC,CAAE,GAEpC,IAAMY,EAA6BZ,EAAQY,OACrCT,EAAyBkB,OAAlBA,EAAGrB,EAAQG,SAAOkB,EAxDX,IA0DdjB,EAA2BkB,OAAnBA,EAAGtB,EAAQI,UAAQkB,EAC5B,WAAmB,OAAAjB,KAAKC,UAAS,GAAAC,MAAAC,KAAAC,WAAM,EAEtCc,EAAY,IAAIC,EAAW,QAE3Bd,EAAQ,IAAIC,EAAAA,QAAyB,CACvCC,OAAAA,EACAT,QAAAA,IAGEU,EAAA,eAA4DY,IAA/BX,EAAU,GAAAP,MAAAC,KAAqBC,WACxDM,EAAMX,EAAQY,WAAIF,EAAAA,GAAM,OAAAY,QAAAC,QAE1BjB,EAAMO,IAAIF,GACHL,EAAMQ,IAAIH,2BAEbW,QAAAC,QACMJ,EAAUK,QAAQb,IAAIc,KAAA,WAAA,OAExBnB,EAAMO,IAAIF,GACHL,EAAMQ,IAAIH,GAAKW,QAAAC,QAEI5B,EAAEiB,WAAIF,EAAAA,IAAKe,KAAA,SAA/BV,GAEN,OADAT,EAAMU,IAAIL,EAAKI,GACRA,CAAY,EAE1B,4FAZsBW,CAEnB,EAUHC,SAAAA,EAAAC,GAC0B,GAAvBT,EAAUU,QAAQlB,GAAKgB,EAAA,MAAAC,EAAA,OAAAA,CAAA,GAGnC,CAAC,MAAAE,GAAA,OAAAR,QAAAS,OAAAD,EAEDrB,CAAAA,EAEA,OAFAA,EAAiBH,MAAQA,EAElBG,CACX"}